// <auto-generated />
using DesafioAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioAPI.Migrations
{
    [DbContext(typeof(EstateAgencyContext))]
    [Migration("20240106235846_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("DesafioAPI.Models.RealState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("BedroomQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Rua dos Tambaquis, 100, Jurerê Internacional, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 6,
                            BusinessType = "Aluguel",
                            Neighborhood = "Jurerê Internacional",
                            Title = "Mansão à beira mar de Jurerê Internacional",
                            Value = 150000000.0
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Avenida Governador Irineu Bornhausen, 3600, Agronômica, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 3,
                            BusinessType = "Venda",
                            Neighborhood = "Agronômica",
                            Title = "Apartamento na Beira Mar de Florianópolis",
                            Value = 1500000.0
                        });
                });

            modelBuilder.Entity("DesafioAPI.Models.RealStateImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RealStateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RealStateId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/2c98bca226e13c54573f682945d17186/%7Bdescription%7D.jpg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/88ec4657fe2299025040c796b652e60d/%7Bdescription%7D.jpg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/ce637ca7ec929cb81758021e64caafa2/%7Bdescription%7D.jpg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/a4002f5b599a93edc48457f36d421557/%7Bdescription%7D.jpg",
                            RealStateId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/7b43c8d9330b4ac163f0f97498ca5fc6/%7Bdescription%7D.jpg",
                            RealStateId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://resizedimgs.vivareal.com/fit-in/870x653/named.images.sp/95ebb9c47c5562310fd3fc67a4489329/%7Bdescription%7D.jpg",
                            RealStateId = 2
                        });
                });

            modelBuilder.Entity("DesafioAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alexandrenolla@gmail.com",
                            Name = "Alexandre Nolla",
                            Password = "fullstack123",
                            Telephone = "48999337729"
                        });
                });

            modelBuilder.Entity("DesafioAPI.Models.RealStateImage", b =>
                {
                    b.HasOne("DesafioAPI.Models.RealState", "RealState")
                        .WithMany("RealStateImages")
                        .HasForeignKey("RealStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealState");
                });

            modelBuilder.Entity("DesafioAPI.Models.RealState", b =>
                {
                    b.Navigation("RealStateImages");
                });
#pragma warning restore 612, 618
        }
    }
}
